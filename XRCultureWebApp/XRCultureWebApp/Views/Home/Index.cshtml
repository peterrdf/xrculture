@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <label for="txtGHFolder">GitHub folder</label><br />
    <div style="display: flex; align-items: center; justify-content: center; gap: 8px;">
        <input id="txtGHFolder" type="text" style="width: 400px;" />
        <button type="button" onclick="downloadGitHubRepo()">Process</button>
    </div>
    <button onclick="downloadGitHubFolder('svilenvarbanov2019', 'xrculture_testdata', 'angel', 'main')">Download Folder</button>
    <p>Learn about <a href="https://pro.europeana.eu/project/xrculture">Europeana XRCulture</a></p>
</div>

<textarea id="logArea" rows="10" style="width:100%"></textarea>

<script>
    let workflowId = null;
    let polling = false;

    async function startWorkflow(owner, repo, folder, branch = "main") {
        const url = `/DownloadFolder?handler=StartWorkflow&owner=${encodeURIComponent(owner)}&repo=${encodeURIComponent(repo)}&folder=${encodeURIComponent(folder)}&branch=${encodeURIComponent(branch)}`;
        const response = await fetch(url, { method: 'GET' });
        if (response.ok) {
            workflowId = await response.text();
            polling = true;
            pollLogs();
        }
    }

    async function pollLogs() {
        if (!workflowId) return;
        while (polling) {
            const logResponse = await fetch(`/DownloadFolder?handler=Logs&workflowId=${workflowId}`);
            if (logResponse.ok) {
                const logs = await logResponse.text();
                const logArea = document.getElementById('logArea');
                logArea.value = logs;
                logArea.scrollTop = logArea.scrollHeight; // Auto-scroll to bottom
            }
            await new Promise(r => setTimeout(r, 1000));
        }
    }

    function downloadGitHubRepo() {
        const input = document.getElementById('txtGHFolder').value.trim();
        const match = input.match(/^https:\/\/github\.com\/([^\/]+)\/([^\/]+)(\/.*)?$/);
        if (!match) {
            alert('Please enter a valid GitHub repository URL (e.g., https://github.com/owner/repo)');
            return;
        }
        const owner = match[1];
        const repo = match[2];
        const folder = match[3] ? match[3].substring(1) : '';
        OnGetAsync(owner, repo, folder);
    }

    function downloadGitHubFolder(owner, repo, folder, branch = "main") {
        startWorkflow(owner, repo, folder);
    }

    async function callDownloadFolder(owner, repo, folder, branch = "main") {
        const url = `/DownloadFolder?owner=${encodeURIComponent(owner)}&repo=${encodeURIComponent(repo)}&folder=${encodeURIComponent(folder)}&branch=${encodeURIComponent(branch)}`;
        const response = await fetch(url, {
            method: 'GET'
        });

        if (response.ok) {
            const result = await response.text();
            console.log(result);
        } else {
            console.error('Error:', response.statusText);
        }
    }
</script>
